// DENSE PWA Service Worker
// Provides offline capabilities and caching for the fitness app

const CACHE_NAME = 'dense-pwa-v1';
const STATIC_CACHE_NAME = 'dense-static-v1';
const DYNAMIC_CACHE_NAME = 'dense-dynamic-v1';

// Assets to cache on install
const STATIC_ASSETS = [
  '/',
  '/manifest.json',
  '/favicon.png',
  // Icons
  '/icon-72x72.png',
  '/icon-96x96.png',
  '/icon-128x128.png',
  '/icon-144x144.png',
  '/icon-152x152.png',
  '/icon-192x192.png',
  '/icon-384x384.png',
  '/icon-512x512.png',
  // Main app bundle (will be generated by Expo)
  '/_expo/static/js/web/index.bundle.js',
  '/_expo/static/css/web/index.bundle.css'
];

// Routes that should always try network first
const NETWORK_FIRST_ROUTES = [
  '/api/',
  '/_expo/static/js/web/',
  '/_expo/static/css/web/'
];

// Routes that can work offline
const OFFLINE_ROUTES = [
  '/',
  '/programs',
  '/progress', 
  '/ai-chat',
  '/settings',
  '/nutrition'
];

// Install event - cache static assets
self.addEventListener('install', (event) => {
  console.log('[SW] Installing service worker');
  
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME)
      .then((cache) => {
        console.log('[SW] Caching static assets');
        return cache.addAll(STATIC_ASSETS.filter(asset => asset !== '/'));
      })
      .then(() => {
        console.log('[SW] Static assets cached');
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error('[SW] Failed to cache static assets:', error);
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating service worker');
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== STATIC_CACHE_NAME && cacheName !== DYNAMIC_CACHE_NAME) {
            console.log('[SW] Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('[SW] Service worker activated');
      return self.clients.claim();
    })
  );
});

// Fetch event - handle network requests
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }
  
  // Skip Chrome extension requests
  if (url.protocol === 'chrome-extension:') {
    return;
  }

  event.respondWith(handleFetch(request));
});

async function handleFetch(request) {
  const url = new URL(request.url);
  const pathname = url.pathname;
  
  try {
    // Strategy 1: Network First (for API calls and dynamic content)
    if (NETWORK_FIRST_ROUTES.some(route => pathname.startsWith(route))) {
      return await networkFirst(request);
    }
    
    // Strategy 2: Cache First (for static assets)
    if (pathname.includes('static') || pathname.includes('assets')) {
      return await cacheFirst(request);
    }
    
    // Strategy 3: Stale While Revalidate (for app routes)
    if (OFFLINE_ROUTES.some(route => pathname === route || pathname.startsWith(route))) {
      return await staleWhileRevalidate(request);
    }
    
    // Default: Network with cache fallback
    return await networkWithCacheFallback(request);
    
  } catch (error) {
    console.error('[SW] Fetch error:', error);
    return await getOfflineFallback(request);
  }
}

// Caching strategies
async function networkFirst(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    const cachedResponse = await caches.match(request);
    return cachedResponse || await getOfflineFallback(request);
  }
}

async function cacheFirst(request) {
  const cachedResponse = await caches.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(STATIC_CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    return await getOfflineFallback(request);
  }
}

async function staleWhileRevalidate(request) {
  const cachedResponse = await caches.match(request);
  
  const fetchPromise = fetch(request).then((networkResponse) => {
    if (networkResponse.ok) {
      const cache = caches.open(DYNAMIC_CACHE_NAME);
      cache.then(c => c.put(request, networkResponse.clone()));
    }
    return networkResponse;
  }).catch(() => cachedResponse);
  
  return cachedResponse || await fetchPromise;
}

async function networkWithCacheFallback(request) {
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(DYNAMIC_CACHE_NAME);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    const cachedResponse = await caches.match(request);
    return cachedResponse || await getOfflineFallback(request);
  }
}

// Offline fallback responses
async function getOfflineFallback(request) {
  const url = new URL(request.url);
  
  // For navigation requests, return cached index.html or offline page
  if (request.mode === 'navigate') {
    const cachedIndex = await caches.match('/');
    if (cachedIndex) {
      return cachedIndex;
    }
    
    return new Response(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>DENSE - Offline</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #000; color: #00FF88; 
            display: flex; flex-direction: column; 
            align-items: center; justify-content: center; 
            height: 100vh; margin: 0; text-align: center;
          }
          .icon { font-size: 4rem; margin-bottom: 1rem; }
          .title { font-size: 2rem; margin-bottom: 0.5rem; }
          .subtitle { color: #666; margin-bottom: 2rem; }
          .button { 
            background: #00FF88; color: #000; 
            padding: 1rem 2rem; border: none; 
            border-radius: 0.5rem; font-size: 1rem;
            cursor: pointer; font-weight: bold;
          }
        </style>
      </head>
      <body>
        <div class="icon">ðŸ’ª</div>
        <h1 class="title">DENSE</h1>
        <p class="subtitle">You're offline, but your workout continues!</p>
        <p>Some features may be limited without internet connection.</p>
        <button class="button" onclick="window.location.reload()">
          Try Again
        </button>
      </body>
      </html>
    `, {
      status: 200,
      headers: { 'Content-Type': 'text/html' }
    });
  }
  
  // For other requests, return a JSON error response
  if (request.headers.get('accept')?.includes('application/json')) {
    return new Response(JSON.stringify({
      error: 'Offline',
      message: 'This feature requires an internet connection'
    }), {
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    });
  }
  
  // Default offline response
  return new Response('Offline', { status: 503 });
}

// Background sync for future implementation
self.addEventListener('sync', (event) => {
  console.log('[SW] Background sync:', event.tag);
  
  if (event.tag === 'workout-data-sync') {
    event.waitUntil(syncWorkoutData());
  }
});

async function syncWorkoutData() {
  // Future implementation: sync offline workout data
  console.log('[SW] Syncing workout data...');
}

// Push notifications for future implementation
self.addEventListener('push', (event) => {
  console.log('[SW] Push notification received');
  
  const options = {
    body: event.data ? event.data.text() : 'New workout reminder!',
    icon: '/icon-192x192.png',
    badge: '/icon-72x72.png',
    vibrate: [200, 100, 200],
    tag: 'workout-reminder',
    requireInteraction: true,
    actions: [
      {
        action: 'start-workout',
        title: 'Start Workout',
        icon: '/icon-72x72.png'
      },
      {
        action: 'dismiss',
        title: 'Dismiss'
      }
    ]
  };
  
  event.waitUntil(
    self.registration.showNotification('DENSE Fitness', options)
  );
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  if (event.action === 'start-workout') {
    event.waitUntil(
      clients.openWindow('/workout-session')
    );
  } else if (event.action === 'dismiss') {
    // Just close the notification
  } else {
    // Default action - open the app
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

console.log('[SW] Service worker loaded successfully');
