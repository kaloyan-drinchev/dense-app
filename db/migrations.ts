// This file will be auto-generated by drizzle-kit generate
// For now, we'll create a manual initialization

import { Platform } from 'react-native';

// Conditional imports to avoid bundling database modules on web
let expo_sqlite: any = null;
let DatabaseVersionManager: any = null;

if (Platform.OS !== 'web') {
  try {
    const clientModule = require('./client');
    expo_sqlite = clientModule.expo_sqlite;
    DatabaseVersionManager = require('./migrations/version-manager').DatabaseVersionManager;
  } catch (error) {
    console.warn('Failed to load database modules:', error);
  }
}

export const initializeDatabase = async () => {
  try {
    // Skip database initialization on web platform
    if (Platform.OS === 'web') {
      console.log('‚ö†Ô∏è Database initialization skipped on web platform');
      return true; // Return success for web compatibility
    }
    
    // Check if database is available (will be null on web)
    if (!expo_sqlite) {
      console.log('‚ö†Ô∏è Database not available');
      return false;
    }
    
    console.log('üîÑ Initializing database with migrations...');
    
    // Check and run migrations first
    await DatabaseVersionManager.checkAndMigrate();
    
    // Add missing columns if they don't exist (manual migrations)
    try {
      await expo_sqlite.execAsync(`
        ALTER TABLE user_profiles ADD COLUMN profile_picture TEXT;
      `);
      console.log('‚úÖ Added profile_picture column to user_profiles table');
    } catch (error) {
      // Column might already exist, ignore the error
      console.log('‚ÑπÔ∏è profile_picture column already exists or error adding:', error);
    }

    try {
      await expo_sqlite.execAsync(`
        ALTER TABLE user_profiles ADD COLUMN target_weight REAL;
      `);
      console.log('‚úÖ Added target_weight column to user_profiles table');
    } catch (error) {
      console.log('‚ÑπÔ∏è target_weight column already exists or error adding:', error);
    }

    try {
      await expo_sqlite.execAsync(`
        ALTER TABLE user_profiles ADD COLUMN body_fat REAL;
      `);
      console.log('‚úÖ Added body_fat column to user_profiles table');
    } catch (error) {
      console.log('‚ÑπÔ∏è body_fat column already exists or error adding:', error);
    }
    
    // Create tables using raw SQL for initial setup
    await expo_sqlite.execAsync(`
      CREATE TABLE IF NOT EXISTS user_profiles (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        email TEXT,
        profile_picture TEXT,
        age INTEGER,
        weight REAL,
        height REAL,
        target_weight REAL,
        body_fat REAL,
        goal TEXT,
        created_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        updated_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        synced_at TEXT
      );
    `);

    await expo_sqlite.execAsync(`
      CREATE TABLE IF NOT EXISTS programs (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        subtitle TEXT,
        description TEXT,
        duration INTEGER,
        difficulty TEXT,
        type TEXT,
        image TEXT,
        data TEXT,
        created_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        updated_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        synced_at TEXT
      );
    `);

    await expo_sqlite.execAsync(`
      CREATE TABLE IF NOT EXISTS user_progress (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        program_id TEXT NOT NULL,
        current_week INTEGER DEFAULT 1,
        current_workout INTEGER DEFAULT 1,
        start_date TEXT,
        completed_workouts TEXT,
        weekly_weights TEXT,
        created_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        updated_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        synced_at TEXT
      );
    `);

    await expo_sqlite.execAsync(`
      CREATE TABLE IF NOT EXISTS daily_logs (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        date TEXT NOT NULL,
        food_entries TEXT,
        total_calories REAL DEFAULT 0,
        total_protein REAL DEFAULT 0,
        total_carbs REAL DEFAULT 0,
        total_fat REAL DEFAULT 0,
        created_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        updated_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        synced_at TEXT
      );
    `);

    await expo_sqlite.execAsync(`
      CREATE TABLE IF NOT EXISTS custom_meals (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        name TEXT NOT NULL,
        description TEXT,
        ingredients TEXT,
        nutrition TEXT,
        created_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        updated_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        synced_at TEXT
      );
    `);

    await expo_sqlite.execAsync(`
      CREATE TABLE IF NOT EXISTS user_wizard_results (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        
        -- DENSE V1 9-Step Onboarding Fields
        squat_kg REAL,
        bench_kg REAL,
        deadlift_kg REAL,
        training_experience TEXT,
        body_fat_level TEXT,
        training_days_per_week INTEGER,
        preferred_training_days TEXT,
        muscle_priorities TEXT,
        pump_work_preference TEXT,
        recovery_profile TEXT,
        program_duration_weeks INTEGER,
        
        -- Legacy fields (backward compatibility)
        primary_goal TEXT,
        target_weight REAL,
        timeframe TEXT,
        fitness_level TEXT,
        workout_frequency TEXT,
        preferred_workout_length TEXT,
        preferred_workout_types TEXT,
        available_equipment TEXT,
        workout_location TEXT,
        weaknesses TEXT,
        injuries TEXT,
        focus_muscle TEXT,
        
        -- AI Program Generation Output
        suggested_programs TEXT,
        generated_split TEXT,
        
        completed_at TEXT DEFAULT (CURRENT_TIMESTAMP),
        updated_at TEXT DEFAULT (CURRENT_TIMESTAMP)
      );
    `);

    await expo_sqlite.execAsync(`
      CREATE TABLE IF NOT EXISTS sync_status (
        id TEXT PRIMARY KEY,
        table_name TEXT NOT NULL UNIQUE,
        last_pulled_at TEXT,
        last_pushed_at TEXT,
        updated_at TEXT DEFAULT (CURRENT_TIMESTAMP)
      );
    `);

    console.log('‚úÖ Database initialized successfully with migrations!');
    return true;
  } catch (error) {
    console.error('‚ùå Database initialization error:', error);
    return false;
  }
};